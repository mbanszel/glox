// generated by generate_ast tool. Do not edit.
package lox

type ExprVisitor interface {
  VisitBinary(expr Binary) any
  VisitGrouping(expr Grouping) any
  VisitLiteral(expr Literal) any
  VisitUnary(expr Unary) any
}

type Expr interface {
  Accept(visitor ExprVisitor) any
}

//  -------------------------------------------------------------
type Binary struct {
  left Expr
  operator Token
  right Expr
}

func NewBinary(left Expr, operator Token, right Expr) Binary {
  return Binary{
    left:left,
    operator:operator,
    right:right,
  }
}

func (c Binary) Accept(visitor ExprVisitor) any {
  return visitor.VisitBinary(c)
}
//  -------------------------------------------------------------
type Grouping struct {
  expression Expr
}

func NewGrouping(expression Expr) Grouping {
  return Grouping{
    expression:expression,
  }
}

func (c Grouping) Accept(visitor ExprVisitor) any {
  return visitor.VisitGrouping(c)
}
//  -------------------------------------------------------------
type Literal struct {
  value any
}

func NewLiteral(value any) Literal {
  return Literal{
    value:value,
  }
}

func (c Literal) Accept(visitor ExprVisitor) any {
  return visitor.VisitLiteral(c)
}
//  -------------------------------------------------------------
type Unary struct {
  operator TokenType
  right Expr
}

func NewUnary(operator TokenType, right Expr) Unary {
  return Unary{
    operator:operator,
    right:right,
  }
}

func (c Unary) Accept(visitor ExprVisitor) any {
  return visitor.VisitUnary(c)
}
