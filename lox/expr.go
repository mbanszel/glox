// generated by generate_ast tool. Do not edit.
package lox

type ExprVisitor interface {
  VisitBinaryExpr(expr BinaryExpr) any
  VisitGroupingExpr(expr GroupingExpr) any
  VisitLiteralExpr(expr LiteralExpr) any
  VisitUnaryExpr(expr UnaryExpr) any
}

type Expr interface {
  Accept(visitor ExprVisitor) any
}

//  -------------------------------------------------------------
type BinaryExpr struct {
  left Expr
  operator Token
  right Expr
}

func NewBinaryExpr(left Expr, operator Token, right Expr) BinaryExpr {
  return BinaryExpr{
    left:left,
    operator:operator,
    right:right,
  }
}

func (c BinaryExpr) Accept(visitor ExprVisitor) any {
  return visitor.VisitBinaryExpr(c)
}
//  -------------------------------------------------------------
type GroupingExpr struct {
  expression Expr
}

func NewGroupingExpr(expression Expr) GroupingExpr {
  return GroupingExpr{
    expression:expression,
  }
}

func (c GroupingExpr) Accept(visitor ExprVisitor) any {
  return visitor.VisitGroupingExpr(c)
}
//  -------------------------------------------------------------
type LiteralExpr struct {
  value any
}

func NewLiteralExpr(value any) LiteralExpr {
  return LiteralExpr{
    value:value,
  }
}

func (c LiteralExpr) Accept(visitor ExprVisitor) any {
  return visitor.VisitLiteralExpr(c)
}
//  -------------------------------------------------------------
type UnaryExpr struct {
  operator Token
  right Expr
}

func NewUnaryExpr(operator Token, right Expr) UnaryExpr {
  return UnaryExpr{
    operator:operator,
    right:right,
  }
}

func (c UnaryExpr) Accept(visitor ExprVisitor) any {
  return visitor.VisitUnaryExpr(c)
}
