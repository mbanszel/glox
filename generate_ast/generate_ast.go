package main

import (
	"fmt"
	"io"
	"os"
	"strings"
)

func main() {
	if len(os.Args) != 2 {
		fmt.Println("Usage: generate_ast <output directory>")
		os.Exit(64)
	}
	outputDir := os.Args[1]
	fmt.Printf("output directory: %s\n", outputDir)

	defineAst(outputDir, "Expr", []string{
		"Assignment : name Token, value Expr",
		"Binary	    : left Expr, operator Token, right Expr",
		"Grouping   : expression Expr",
		"Literal    : value any",
		"Logical    : left Expr, operator Token, right Expr",
		"Unary      : operator Token, right Expr",
		"Variable   : name Token",
	})

	defineAst(outputDir, "Stmt", []string{
		"Expression : expression Expr",
		"If         : condition Expr, thenBranch Stmt, elseBranch Stmt",
		"Print      : expression Expr",
		"Block      : statements []Stmt",
		"Var        : name Token, initializer Expr",
		"While      : condition Expr, body Stmt",
	})
}

func defineAst(outputDir string, baseName string, types []string) {
	path := fmt.Sprintf("%s/%s.go", outputDir, strings.ToLower(baseName))

	file, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		panic(fmt.Sprintf("Failed to open output file: %s\n", path))
	}
	defer file.Close()

	fmt.Fprintln(file, "// generated by generate_ast tool. Do not edit.")
	fmt.Fprintln(file, "package lox")
	fmt.Fprintln(file)
	defineVisitor(file, baseName, types)
	fmt.Fprintln(file)
	fmt.Fprintln(file, "type "+baseName+" interface {")
	fmt.Fprintf(file, "  Accept(visitor %sVisitor) (any, LoxError)\n", baseName)
	fmt.Fprintln(file, "}")
	fmt.Fprintln(file)

	for _, tokenTokenType := range types {
		className := strings.Split(tokenTokenType, ":")[0]
		fields := strings.Split(tokenTokenType, ":")[1]
		className = strings.TrimSpace(className)
		fields = strings.TrimSpace(fields)
		defineTokenType(file, baseName, className, fields)
	}
}

func defineTokenType(file io.Writer, baseName string, className string, fieldList string) {
	fmt.Fprintln(file, "// ", "-------------------------------------------------------------")
	fields := strings.Split(fieldList, ",")
	typeName := defineTypeName(className, baseName)
	fmt.Fprintln(file, "type "+typeName+" struct {")

	for _, field := range fields {
		field = strings.TrimSpace(field)
		fmt.Fprintln(file, "  "+field)
	}
	fmt.Fprintln(file, "}")
	fmt.Fprintln(file)

	fmt.Fprintf(file, "func New%s(%s) %s {\n", typeName, fieldList, typeName)
	fmt.Fprintf(file, "  return %s{\n", typeName)
	for _, field := range fields {
		field = strings.TrimSpace(field)
		name := strings.Split(field, " ")[0]
		fmt.Fprintf(file, "    %s:%s,\n", name, name)
	}
	fmt.Fprintln(file, "  }")
	fmt.Fprintln(file, "}")
	fmt.Fprintln(file)

	fmt.Fprintf(file, "func (c %s) Accept(visitor %sVisitor) (any, LoxError) {\n", typeName, baseName)
	fmt.Fprintf(file, "  return visitor.Visit%s(c)\n", typeName)
	fmt.Fprintf(file, "}\n")

}

func defineVisitor(file io.Writer, baseName string, types []string) {
	fmt.Fprintf(file, "type %sVisitor interface {\n", baseName)
	for _, aType := range types {
		className := strings.TrimSpace(strings.Split(aType, ":")[0])
		typeName := defineTypeName(className, baseName)
		base := strings.ToLower(baseName)
		fmt.Fprintf(file, "  Visit%s(%s %s) (any, LoxError)\n", typeName, base, typeName)
	}
	fmt.Fprintln(file, "}")

}

func defineTypeName(className, baseName string) string {
	return className + baseName
}
